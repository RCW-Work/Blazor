#pragma checksum "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2a9fa67c31f3cc16463a2c35818b040099e699c4"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorSCADA.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using BlazorSCADA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using BlazorSCADA.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
using System.ComponentModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
using BlazorSCADA.ModbusTCP;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/modbus")]
    public partial class ModbusTCP : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 109 "D:\GitHub_Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
       
    public ushort dataNumbers = 32;                     //Data Numbers
    public int tRow = 8;                                //Table Row
    public ushort dataNumberMax = 1024;                 //Max Data Buffer
    public string slaveIP = "127.0.0.1";                //default
    public ushort portNum = 502;                        //default
    private ModbusService Service;                      //Service
    private ModbusService.Server MBmaster;              //Modebus Master/Server
    private byte[] rcvData8 = new byte[2048];           //rcvRawData
    private ushort[] rcvData16 = new ushort[1024];      //rcvRawData to uint16

    private bool isPolling = false;                     //polling flag
    string ErrMsg;                                      //Error Message

    public string[] btnValue = new string[10];
    public string btnCalss = "btn-danger";

    public List<ModbusData> mbDataList { get; set; } = new List<ModbusData>();



    protected override void OnInitialized()
    {
    }
    private void initModbusDataList(ushort dataNumber)
    {

        mbDataList = new List<ModbusData>()
        {
            //new ModbusData { Address = 0, revData=0, inputData=0 },
            //new ModbusData { Address = 1, revData=0, inputData=0 }
        };

        for (UInt16 i = 0; i < dataNumberMax; i++)
        {
            mbDataList.Add(new ModbusData { Address = i, revData = 0, inputData = 0,isFocus=false});
        }
        tRow = dataNumber / 4 + 1;
    }

    public static void ByteToU16Rev(byte[] input, ushort[] output, int index, int number)
    {
        for (int i = index; i < number; i += 2)
        {
            output[i >> 1] = (ushort)(input[i] << 8 | input[i + 1]);
        }
    }

    private void MBmaster_OnException(ushort id, byte unit, byte function, byte exception)
    {
        string exc = "Modbus says error: ";
        switch (exception)
        {
            case ModbusService.Server.excIllegalFunction: exc += "Illegal function!"; break;
            case ModbusService.Server.excIllegalDataAdr: exc += "Illegal data adress!"; break;
            case ModbusService.Server.excIllegalDataVal: exc += "Illegal data value!"; break;
            case ModbusService.Server.excSlaveDeviceFailure: exc += "Slave device failure!"; break;
            case ModbusService.Server.excAck: exc += "Acknoledge!"; break;
            case ModbusService.Server.excGatePathUnavailable: exc += "Gateway path unavailbale!"; break;
            case ModbusService.Server.excExceptionTimeout: exc += "Slave timed out!"; break;
            case ModbusService.Server.excExceptionConnectionLost: exc += "Connection is lost!"; break;
            case ModbusService.Server.excExceptionNotConnected: exc += "Not connected!"; break;
        }
        ErrMsg = exc;
    }

    private void MBmaster_OnResponseData(ushort ID, byte unit, byte function, byte[] values)
    {
        // ------------------------------------------------------------------------
        // Identify requested data
        switch (ID)
        {
            case 1:
                rcvData8 = values;
                break;
            case 2:
                rcvData8 = values;
                break;
            case 3:
                rcvData8 = values;
                break;
            case 4:
                rcvData8 = values;
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                break;
            case 8:
                break;
        }
    }

    private void Connect()
    {
        //MBmaster = new ModbusService.Server("127.0.0.1", 502,true);
        MBmaster = new ModbusService.Server();
        MBmaster.connect(slaveIP, portNum, true);
        if (MBmaster.connected == false)
        {
            ErrMsg = "connect fail";
            return;
        }
        MBmaster.OnResponseData += new ModbusService.Server.ResponseData(MBmaster_OnResponseData);
        MBmaster.OnException += new ModbusService.Server.ExceptionData(MBmaster_OnException);
        btnCalss = "btn-dark";
        initModbusDataList(dataNumbers);
    }
    private void disConnect()
    {
        if (MBmaster != null)
        {
            MBmaster.disconnect();
        }
    }

    async Task GetData(ushort startAddress, ushort numInputs)
    {
        if (MBmaster.connected == true)
        {
            MBmaster.ReadHoldingRegister(3, 0, startAddress, numInputs);
            ByteToU16Rev(rcvData8, rcvData16, 0, numInputs*2);
            await Task.Delay(10);
            StateHasChanged();
        }
    }
    async Task updataValue(ModbusData input)
    {
        await GetData(0, dataNumbers);
        input.inputData = rcvData16[input.Address];
        await Task.Delay(100);
        StateHasChanged();
    }
    async Task updataAllValue(List<ModbusData> inputList)
    {
        await GetData(0, dataNumbers);
        foreach (var input in inputList)
        {
            if (input.isFocus == false)
                input.inputData = rcvData16[input.Address];
        }
        await Task.Delay(100);
        StateHasChanged();
    }
    async Task onBlurHandler(ModbusData input)
    {
        input.isFocus = false;
        await updataValue(input);
    }

    async Task PollingData()
    {
        isPolling = true;
        await GetData(0, dataNumbers);
        await updataAllValue(mbDataList);
        while (isPolling)
        {
            await GetData(0, dataNumbers);
            await updataAllValue(mbDataList);
            await Task.Delay(100);
            StateHasChanged();
        }

    }

    async Task StopPolling()
    {
        isPolling = false;
        await Task.Delay(100);
    }


    async Task WriteData(ushort startAddress, int Data)
    {
        byte[] Value = new byte[2];
        Value[0] = Convert.ToByte((Data >> 8) & 0xFF);
        Value[1] = Convert.ToByte(Data & 0xFF);
        MBmaster.WriteSingleRegister(6, 0, startAddress, Value);
        await Task.Delay(100);
        StateHasChanged();
    }

    async Task onKeyPressHandler(KeyboardEventArgs e, ModbusData input)
    {
        if (e.Code == "Enter" | e.Code == "NumpadEnter")
        {
            byte[] Value = new byte[2];
            Value[0] = Convert.ToByte((input.inputData >> 8) & 0xFF);
            Value[1] = Convert.ToByte(input.inputData & 0xFF);
            MBmaster.intWriteSingleRegister(6, 0, input.Address, Value);
            await Task.Delay(100);
            StateHasChanged();
        }
    }





#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
