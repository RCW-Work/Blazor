#pragma checksum "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0bddcf71883fcd37a147c734673fba42a64ce43c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorSCADA.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using BlazorSCADA;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\_Imports.razor"
using BlazorSCADA.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
using BlazorSCADA.ModbusTCP;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/modbus")]
    public partial class ModbusTCP : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 87 "D:\GitHub-Workspace\Blazor\BlazorSCADA\BlazorSCADA\Pages\ModbusTCP.razor"
       
    public int tRow = 16;
    public int tCol = 4;
    public string slaveIP="127.0.0.1";
    public ushort portNum=502;
    private ModbusService Service;
    private ModbusService.Server MBmaster;
    private byte[] rcvData = new byte[2048];
    private bool isPolling = false;
    public int testInput = 0;


    string ErrMsg;

    private ModbusMaster tempMaster;

    private void MBmaster_OnException(ushort id, byte unit, byte function, byte exception)
    {
        string exc = "Modbus says error: ";
        switch (exception)
        {
            case ModbusService.Server.excIllegalFunction: exc += "Illegal function!"; break;
            case ModbusService.Server.excIllegalDataAdr: exc += "Illegal data adress!"; break;
            case ModbusService.Server.excIllegalDataVal: exc += "Illegal data value!"; break;
            case ModbusService.Server.excSlaveDeviceFailure: exc += "Slave device failure!"; break;
            case ModbusService.Server.excAck: exc += "Acknoledge!"; break;
            case ModbusService.Server.excGatePathUnavailable: exc += "Gateway path unavailbale!"; break;
            case ModbusService.Server.excExceptionTimeout: exc += "Slave timed out!"; break;
            case ModbusService.Server.excExceptionConnectionLost: exc += "Connection is lost!"; break;
            case ModbusService.Server.excExceptionNotConnected: exc += "Not connected!"; break;

        }
        ErrMsg = exc;
    }

    private void MBmaster_OnResponseData(ushort ID, byte unit, byte function, byte[] values)
    {
        // ------------------------------------------------------------------------
        // Identify requested data
        switch (ID)
        {
            case 1:
                rcvData = values;
                break;
            case 2:
                rcvData = values;
                break;
            case 3:
                rcvData = values;
                break;
            case 4:
                rcvData = values;
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                break;
            case 8:
                break;
        }
    }


    private void Connect()
    {
        //MBmaster = new ModbusService.Server("127.0.0.1", 502,true);
        MBmaster = new ModbusService.Server();
        MBmaster.connect(slaveIP, portNum, true);

        MBmaster.OnResponseData += new ModbusService.Server.ResponseData(MBmaster_OnResponseData);
        MBmaster.OnException += new ModbusService.Server.ExceptionData(MBmaster_OnException);
    }

    async Task GetData()
    {
        if (MBmaster != null)
        {
            MBmaster.ReadHoldingRegister(3, 0, 0, 100);
            await Task.Delay(10);
            StateHasChanged();
        }
        else
        {
            return;
        }

    }

    async Task PollingData()
    {
        isPolling = true;
        while (isPolling)
        {
            await GetData();
            await Task.Delay(100);
        }
    }

    async Task StopPolling()
    {
        isPolling = false;
        await Task.Delay(100);
    }
    async Task WriteData(ushort startAddress, int Data)
    {
        byte[] Value = new byte[2];
        Value[0] = Convert.ToByte((Data >> 8)&0xFF);
        Value[1] = Convert.ToByte(Data & 0xFF);
        startAddress = 0x00;
        MBmaster.WriteSingleRegister(6, 0, startAddress, Value);
        await Task.Delay(100);
        StateHasChanged();
    }

    async Task Enter(KeyboardEventArgs e, ushort startAddress, int Data)
    {
        if (e.Code == "Enter" | e.Code == "NumpadEnter")
        {

            byte[] Value = new byte[2];
            Value[0] = Convert.ToByte((Data >> 8) & 0xFF);
            Value[1] = Convert.ToByte(Data & 0xFF);
            startAddress = 0x00;
            MBmaster.WriteSingleRegister(6, 0, startAddress, Value);
            await Task.Delay(1);
            StateHasChanged();
        }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
