@using System;
@using System.ComponentModel;
@page "/modbus"
@using BlazorSCADA.ModbusTCP



<h3>ModbusTCP Server</h3>

<div>
    <table>
        <thead>
            <tr>
                <th>SlaveIP</th>
                <th>PortNumber</th>
                <th>BTN</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input class="text-black-50" @bind="slaveIP" /></td>
                <td><input class="text-black-50" @bind="portNum" /></td>
                <td><input type="button" class="btn-danger" value="Connect" @onclick="()=>Connect()" /></td>
            </tr>
        </tbody>
    </table>
    <label>Error Message @ErrMsg</label><br />
    <br />
    <td><input class="text-black-50" @bind="dataNumbers" /></td>
</div>


<div>
    @if (MBmaster == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            <input type="button" class="btn-danger" value="GetData" @onclick="()=>GetData(0,100)" />
            <input type="button" class="btn-danger" value="Polling" @onclick="()=>PollingData()" />
            <input type="button" class="btn-danger" value="StopPolling" @onclick="()=>StopPolling()" /><br />
        </div>
        <div>
            <table>
                <thead class="table-dark" align="center">
                    <tr>
                        <th width="100px">Index</th>
                        <th width="100px">Data</th>
                        <th width="100px">Index</th>
                        <th width="100px">Data</th>
                        <th width="100px">Index</th>
                        <th width="100px">Data</th>
                        <th width="100px">Index</th>
                        <th width="100px">Data</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var mbData in mbDataList)
                    {
                        if (mbData.Address / tRow == 0)
                        {
                            <tr>
                                <td>@mbData.Address </td>
                                <td>
                                    <input type="text" name="@mbData.Address" @bind="@mbDataList[mbData.Address].inputData"
                                           @bind:event="oninput"
                                           @onkeypress="(KeyboardEventArgs e)=>testEnter(e,mbDataList[mbData.Address])"
                                           @onblur="()=>updataValue(mbDataList[mbData.Address])" />
                                </td>
                                <td>@(mbData.Address + tRow * 1)</td>
                                <td>
                                    <input type="text" name="@mbData.Address" @bind="@mbDataList[mbData.Address+tRow * 1].inputData"
                                           @bind:event="oninput"
                                           @onkeypress="(KeyboardEventArgs e)=>testEnter(e,mbDataList[mbData.Address+tRow * 1 ])"
                                           @onblur="()=>updataValue(mbDataList[mbData.Address+tRow * 1 ])" />
                                </td>
                                <td>@(mbData.Address + tRow * 2)</td>
                                <td>
                                    <input type="text" name="@mbData.Address" @bind="@mbDataList[mbData.Address+ tRow * 2].inputData"
                                           @bind:event="oninput"
                                           @onkeypress="(KeyboardEventArgs e)=>testEnter(e,mbDataList[mbData.Address+ tRow * 2])"
                                           @onblur="()=>updataValue(mbDataList[mbData.Address+ tRow * 2])" />
                                </td>
                                <td>@(mbData.Address + tRow * 3 )</td>
                                <td>
                                    <input type="text" name="@mbData.Address" @bind="@mbDataList[mbData.Address+ tRow * 3].inputData"
                                           @bind:event="oninput"
                                           @onkeypress="(KeyboardEventArgs e)=>testEnter(e,mbDataList[mbData.Address+ tRow * 3])"
                                           @onblur="()=>updataValue(mbDataList[mbData.Address+ tRow * 3])" />
                                </td>
                            </tr>
                        }

                    }
                </tbody>
            </table>
        </div>
    }
</div>



@code {



    public List<ModbusData> mbDataList { get; set; } = new List<ModbusData>();

    protected override void OnInitialized()
    {
    }
    private void initModbusDataList(int dataNumber)
    {

        mbDataList = new List<ModbusData>()
        {
            //new ModbusData { Address = 0, revData=0, inputData=0 },
            //new ModbusData { Address = 1, revData=0, inputData=0 }
        };

        for (int i = 0; i < dataNumberMax; i++)
        {
            mbDataList.Add(new ModbusData { Address = (ushort)i, revData = 0, inputData = 0 });
        }
    }


    async Task testEnter(KeyboardEventArgs e, ModbusData input)
    {
        if (e.Code == "Enter" | e.Code == "NumpadEnter")
        {
            byte[] Value = new byte[2];
            Value[0] = Convert.ToByte((input.inputData >> 8) & 0xFF);
            Value[1] = Convert.ToByte(input.inputData & 0xFF);
            MBmaster.intWriteSingleRegister(6, 0, input.Address, Value);
            await Task.Delay(100);
            StateHasChanged();
        }
    }
    async Task updataValue(ModbusData input)
    {
        await GetData(0, 100);
        input.inputData = rcvData16[input.Address];
        await Task.Delay(100);
        StateHasChanged();
    }
    async Task updataAllValue(List<ModbusData> inputList)
    {
        await GetData(0, dataNumbers);
        foreach (var input in inputList)
        {
            input.inputData = rcvData16[input.Address];
        }
        await Task.Delay(100);
        StateHasChanged();
    }



    public int tRow = 8;
    public int tCol = 4;
    public ushort dataNumbers = 32;
    public ushort dataNumberMax = 1024;
    public string slaveIP = "127.0.0.1";
    public ushort portNum = 502;
    private ModbusService Service;
    private ModbusService.Server MBmaster;
    private byte[] rcvData8 = new byte[2048];
    private int[] Address = new int[1024];
    private int[] txtValue = new int[1024];
    private ushort[] rcvData16 = new ushort[1024];

    private bool isPolling = false;
    public int testInput = 0;
    string ErrMsg;
    private ModbusMaster tempMaster;







    public static void ByteToU16Rev(byte[] input, ushort[] output, int index, int number)
    {
        for (int i = index; i < number; i += 2)
        {
            output[i >> 1] = (ushort)(input[i] << 8 | input[i + 1]);
        }
    }

    private void MBmaster_OnException(ushort id, byte unit, byte function, byte exception)
    {
        string exc = "Modbus says error: ";
        switch (exception)
        {
            case ModbusService.Server.excIllegalFunction: exc += "Illegal function!"; break;
            case ModbusService.Server.excIllegalDataAdr: exc += "Illegal data adress!"; break;
            case ModbusService.Server.excIllegalDataVal: exc += "Illegal data value!"; break;
            case ModbusService.Server.excSlaveDeviceFailure: exc += "Slave device failure!"; break;
            case ModbusService.Server.excAck: exc += "Acknoledge!"; break;
            case ModbusService.Server.excGatePathUnavailable: exc += "Gateway path unavailbale!"; break;
            case ModbusService.Server.excExceptionTimeout: exc += "Slave timed out!"; break;
            case ModbusService.Server.excExceptionConnectionLost: exc += "Connection is lost!"; break;
            case ModbusService.Server.excExceptionNotConnected: exc += "Not connected!"; break;
        }
        ErrMsg = exc;
    }

    private void MBmaster_OnResponseData(ushort ID, byte unit, byte function, byte[] values)
    {
        // ------------------------------------------------------------------------
        // Identify requested data
        switch (ID)
        {
            case 1:
                rcvData8 = values;
                break;
            case 2:
                rcvData8 = values;
                break;
            case 3:
                rcvData8 = values;
                break;
            case 4:
                rcvData8 = values;
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                break;
            case 8:
                break;
        }
    }

    private void Connect()
    {
        //MBmaster = new ModbusService.Server("127.0.0.1", 502,true);
        MBmaster = new ModbusService.Server();
        MBmaster.connect(slaveIP, portNum, true);
        if (MBmaster.connected == false)
        {
            ErrMsg = "connect fail";
            return;
        }
        MBmaster.OnResponseData += new ModbusService.Server.ResponseData(MBmaster_OnResponseData);
        MBmaster.OnException += new ModbusService.Server.ExceptionData(MBmaster_OnException);
        initModbusDataList(dataNumbers);
    }

    async Task GetData(ushort startAddress, ushort numInputs)
    {
        if (MBmaster != null)
        {
            MBmaster.ReadHoldingRegister(3, 0, startAddress, numInputs);
            ByteToU16Rev(rcvData8, rcvData16, 0, numInputs);
            await Task.Delay(10);
            StateHasChanged();
        }
        else
        {
            return;
        }
    }

    async Task PollingData()
    {
        isPolling = true;
        await GetData(0, dataNumbers);
        await updataAllValue(mbDataList);
        while (isPolling)
        {
            await GetData(0, dataNumbers);
            for (int i = 0; i < rcvData16.Length; i++)
            {
                txtValue[i] = (ushort)(rcvData16[i]);
            }
            await Task.Delay(10);
        }

    }

    async Task StopPolling()
    {
        isPolling = false;
        await Task.Delay(100);
    }

    async Task WriteData(ushort startAddress, int Data)
    {
        byte[] Value = new byte[2];
        Value[0] = Convert.ToByte((Data >> 8) & 0xFF);
        Value[1] = Convert.ToByte(Data & 0xFF);
        startAddress = 0x00;
        MBmaster.WriteSingleRegister(6, 0, startAddress, Value);
        await Task.Delay(100);
        StateHasChanged();
    }

}
