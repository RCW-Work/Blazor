@using System;
@using System.ComponentModel;
@page "/modbus"
@using BlazorSCADA.ModbusTCP



<h3>ModbusTCP Server</h3>

<div>
    <table>
        <thead>
            <tr>
                <th>SlaveIP</th>
                <th>PortNumber</th>
                <th>BTN</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input class="text-black-50" @bind="slaveIP" /></td>
                <td><input class="text-black-50" @bind="portNum" /></td>
                <td><input type="button" class="btn-danger" value="Connect" @onclick="()=>Connect()" /></td>
            </tr>
        </tbody>
    </table>
    <label>Error Message @ErrMsg</label><br />

</div>


<div>
    @if (MBmaster == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
<div>
    <input type="button" class="btn-danger" value="GetData" @onclick="()=>GetData(0,100)" /><br />
    <input type="button" class="btn-danger" value="Polling" @onclick="()=>PollingData()" /><br />
    <input type="button" class="btn-block" value="StopPolling" @onclick="()=>StopPolling()" /><br />
    <input type="button" class="btn" value="Write" @onclick="()=>WriteData(0,123)" /><br />
    <td><input type="text" name="0" @bind="testInput"  
               @bind:event="oninput"               
               @onkeypress="(KeyboardEventArgs e)=>Enter(e,0,testInput)" /></td>
</div>

        <table style="table-layout:fixed ">
            <thead class="table-dark" align="center">
                <tr>
                    <th width="100px">Index</th>
                    <th width="100px">Data</th>
                    <th width="100px">Index</th>
                    <th width="100px">Data</th>
                    <th width="100px">Index</th>
                    <th width="100px">Data</th>
                    <th width="100px">Index</th>
                    <th width="100px">Data</th>
                </tr>
            </thead>
            <tbody class="table-bordered">
                @for (int i = 0; i < tRow; i++)
                {
                    <tr>
                        <td>@(i)</td>
                        <td><input type="text" name="array[]" value="@(rcvData16[i])" /></td>
                        <td>@(tRow*1+i)</td>
                        <td><input type="text" name="array[]" value="@rcvData16[tRow * 1 + i]" /></td>
                        <td>@(tRow * 2+i)</td>
                        <td><input type="text" name="array[]" value="@rcvData16[tRow * 2 + i]" /></td>
                        <td>@(tRow * 3+i)</td>
                        <td><input type="text" name="array[]" value="@rcvData16[tRow * 3 + i]" /></td>
                    </tr>
                }
            </tbody>
        </table>

    }
</div>







@code {
    public int tRow = 16;
    public int tCol = 4;
    public string slaveIP="127.0.0.1";
    public ushort portNum=502;
    private ModbusService Service;
    private ModbusService.Server MBmaster;
    private byte[] rcvData8 = new byte[2048];
    private int[] Address = new int[1024];
    private int[] inputData = new int[1024];
    private ushort[] rcvData16 = new ushort[1024];
    
    private bool isPolling = false;
    public int testInput = 0;
    string ErrMsg;
    private ModbusMaster tempMaster;



    public static void ByteToU16Rev(byte[] input , ushort[] output, int index, int number)
    {
        for (int i = index; i< number; i+=2)
        {
            output[i >> 1] = (ushort)(input[i]<<8| input[i + 1] );
        }
    }

    private void MBmaster_OnException(ushort id, byte unit, byte function, byte exception)
    {
        string exc = "Modbus says error: ";
        switch (exception)
        {
            case ModbusService.Server.excIllegalFunction: exc += "Illegal function!"; break;
            case ModbusService.Server.excIllegalDataAdr: exc += "Illegal data adress!"; break;
            case ModbusService.Server.excIllegalDataVal: exc += "Illegal data value!"; break;
            case ModbusService.Server.excSlaveDeviceFailure: exc += "Slave device failure!"; break;
            case ModbusService.Server.excAck: exc += "Acknoledge!"; break;
            case ModbusService.Server.excGatePathUnavailable: exc += "Gateway path unavailbale!"; break;
            case ModbusService.Server.excExceptionTimeout: exc += "Slave timed out!"; break;
            case ModbusService.Server.excExceptionConnectionLost: exc += "Connection is lost!"; break;
            case ModbusService.Server.excExceptionNotConnected: exc += "Not connected!"; break;

        }
        ErrMsg = exc;
    }

    private void MBmaster_OnResponseData(ushort ID, byte unit, byte function, byte[] values)
    {
        // ------------------------------------------------------------------------
        // Identify requested data
        switch (ID)
        {
            case 1:
                rcvData8 = values;
                break;
            case 2:
                rcvData8 = values;
                break;
            case 3:
                rcvData8 = values;
                break;
            case 4:
                rcvData8 = values;
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                break;
            case 8:
                break;
        }
    }

    private void Connect()
    {
        //MBmaster = new ModbusService.Server("127.0.0.1", 502,true);
        MBmaster = new ModbusService.Server();
        MBmaster.connect(slaveIP, portNum, true);
        if (MBmaster.connected == false)
        {
            ErrMsg = "connect fail";
            return;
        }
        MBmaster.OnResponseData += new ModbusService.Server.ResponseData(MBmaster_OnResponseData);
        MBmaster.OnException += new ModbusService.Server.ExceptionData(MBmaster_OnException);
    }

    async Task GetData( ushort startAddress, ushort numInputs)
    {
        if (MBmaster != null)
        {
            MBmaster.ReadHoldingRegister(3, 0, startAddress, numInputs);
            ByteToU16Rev(rcvData8, rcvData16, 0, numInputs);
            await Task.Delay(10);
            StateHasChanged();
        }
        else
        {
            return;
        }

    }

    async Task PollingData()
    {
        isPolling = true;
        while (isPolling)
        {
            await GetData(0,100);
            await Task.Delay(100);
        }
    }

    async Task StopPolling()
    {
        isPolling = false;
        await Task.Delay(100);
    }
    async Task WriteData(ushort startAddress, int Data)
    {
        byte[] Value = new byte[2];
        Value[0] = Convert.ToByte((Data >> 8)&0xFF);
        Value[1] = Convert.ToByte(Data & 0xFF);
        startAddress = 0x00;
        MBmaster.WriteSingleRegister(6, 0, startAddress, Value);
        await Task.Delay(100);
        StateHasChanged();
    }

    async Task Enter(KeyboardEventArgs e, ushort startAddress, int Data)
    {
        if (e.Code == "Enter" | e.Code == "NumpadEnter")
        {
            byte[] Value = new byte[2];
            Value[0] = Convert.ToByte((Data >> 8) & 0xFF);
            Value[1] = Convert.ToByte(Data & 0xFF);
            startAddress = 0x00;
            MBmaster.WriteSingleRegister(6, 0, startAddress, Value);
            await Task.Delay(1);
            StateHasChanged();
        }
    }

}
